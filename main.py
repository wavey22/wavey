import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import CommandStart
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ó–≤—É–∫–æ–æ–ø–µ—Ä–∞—Ç–æ—Ä—ã Telegram user_id
MAKAR_ID = 864755307
IVAN_ID = 536852886

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
user_states = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üéß –£—Å–ª—É–≥–∏")],
        [KeyboardButton(text="üéö –ó–≤—É–∫–æ–æ–ø–µ—Ä–∞—Ç–æ—Ä")],
        [KeyboardButton(text="üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")],
        [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"), KeyboardButton(text="üìç –ê–¥—Ä–µ—Å —Å—Ç—É–¥–∏–∏")],
    ],
    resize_keyboard=True
)

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥
service_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üéô –ó–∞–ø–∏—Å—å"), KeyboardButton(text="üéö –°–≤–µ–¥–µ–Ω–∏–µ")],
        [KeyboardButton(text="ü•Å –ë–∏—Ç"), KeyboardButton(text="‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏")],
        [KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")],
    ],
    resize_keyboard=True
)

# –ó–≤—É–∫–æ–æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
operator_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üéõ –ú–∞–∫–∞—Ä"), KeyboardButton(text="üéõ –ò–≤–∞–Ω")],
        [KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è
confirm_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì© –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")],
        [KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")],
    ],
    resize_keyboard=True
)

@dp.message(CommandStart())
async def start_cmd(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ç—É–¥–∏—é WAVEY üéô\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_menu
    )

@dp.message(F.text == "üéß –£—Å–ª—É–≥–∏")
async def choose_service(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=service_menu)

@dp.message(F.text == "üéô –ó–∞–ø–∏—Å—å")
async def service_record(message: Message):
    user_states[message.from_user.id] = {'service': '–ó–∞–ø–∏—Å—å'}
    await message.answer("üéô <b>–ó–∞–ø–∏—Å—å</b>: –æ—Ç 500‚ÇΩ\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å—ë—Ä–∞:", reply_markup=operator_menu)

@dp.message(F.text == "üéö –°–≤–µ–¥–µ–Ω–∏–µ")
async def service_mix(message: Message):
    user_states[message.from_user.id] = {'service': '–°–≤–µ–¥–µ–Ω–∏–µ'}
    await message.answer("üéö <b>–°–≤–µ–¥–µ–Ω–∏–µ</b>: –æ—Ç 3000‚ÇΩ\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å—ë—Ä–∞:", reply_markup=operator_menu)

@dp.message(F.text == "ü•Å –ë–∏—Ç")
async def service_beat(message: Message):
    user_states[message.from_user.id] = {'service': '–ë–∏—Ç'}
    await message.answer("ü•Å <b>–ë–∏—Ç</b>: –æ—Ç 3000‚ÇΩ\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å—ë—Ä–∞:", reply_markup=operator_menu)

@dp.message(F.text == "‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏")
async def extra_services(message: Message):
    await message.answer("–î–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @AttaRaxOnMe")

@dp.message(F.text == "üéõ –ú–∞–∫–∞—Ä")
async def choose_makar(message: Message):
    user_states[message.from_user.id]['operator'] = '–ú–∞–∫–∞—Ä'
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–≤—É–∫–æ–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: –ú–∞–∫–∞—Ä\n–ù–∞–∂–º–∏—Ç–µ üì© –ó–∞–ø–∏—Å–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", reply_markup=confirm_menu)

@dp.message(F.text == "üéõ –ò–≤–∞–Ω")
async def choose_ivan(message: Message):
    user_states[message.from_user.id]['operator'] = '–ò–≤–∞–Ω'
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–≤—É–∫–æ–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: –ò–≤–∞–Ω\n–ù–∞–∂–º–∏—Ç–µ üì© –ó–∞–ø–∏—Å–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", reply_markup=confirm_menu)

@dp.message(F.text == "üì© –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def confirm_booking(message: Message):
    data = user_states.get(message.from_user.id)
    if not data or 'service' not in data or 'operator' not in data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏ –∑–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å—ë—Ä–∞.")
        return

    operator = data['operator']
    service = data['service']
    username = message.from_user.username or message.from_user.full_name

    text = f"‚ö°Ô∏è –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç @{username} —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É: <b>{service}</b>"

    if operator == "–ú–∞–∫–∞—Ä":
        await bot.
send_message(MAKAR_ID, text)
    elif operator == "–ò–≤–∞–Ω":
        await bot.send_message(IVAN_ID, text)

    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n–°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.", reply_markup=main_menu)
    user_states.pop(message.from_user.id)

@dp.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts(message: Message):
    await message.answer("üì≤ –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\nTelegram: @WAVEY_SOUND")

@dp.message(F.text == "üìç –ê–¥—Ä–µ—Å —Å—Ç—É–¥–∏–∏")
async def studio_address(message: Message):
    await message.answer("üè¢ –ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –≥. –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É\nüìç —É–ª. –ú–∏—Ö–∞–∏–ª–∞ –ù–∞–≥–∏–±–∏–Ω–∞, 14–ì")

@dp.message(F.text == "üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
async def admin_info(message: Message):
    await message.answer("üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å—Ç—É–¥–∏–∏: @AttaRaxOnMe")

@dp.message(F.text.in_(["‚¨Ö –ù–∞–∑–∞–¥", "‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]))
async def back_to_menu(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)

@dp.message()
async def fallback(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é —Å–Ω–∏–∑—É üëá", reply_markup=main_menu)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
